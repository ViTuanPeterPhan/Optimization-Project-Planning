# Programmed by ViTuan "Peter" Phan.

# This is the final iteration of the integration project.

# We intended to create a CPM network to solve for the optimum setup
# of a project so that the minimum number of workers are hired and the
# minimum number of work days will be used.

def main():
    """
main() is the function that runs at the startup of the program. It displays an
introduction message and then opens the menu() function.
    """
    print("Welcome to the job optimization program.",
          "Designed by ViTuan Phan.",
          "This is the final iteration of this project.", sep="\n\n",
          end="\n\n")
    menu()


def menu():
    """
menu() is the user interface portion of the program. It allows the user to
transition between functions without having to run the program again.
    """
    run = "y"
    while run == "y":
        print(
            "\nMain Menu: \n1. Start a new project. \n2. Add jobs to existing "
            "list. \n3. View jobs currently in list. \n4. Optimize project. "
            "\n\n5. Other COP 1500 requirements. \n\n0. End Program. ")
        select_option = input("\nWhich option would you like to utilize? ")
        if select_option == "1":
            reset_list()
        elif select_option == "2":
            job_collect()
        elif select_option == "3":
            job_view_startup()
        elif select_option == "4":
            optimize()
        elif select_option == "5":
            requirements()
        elif select_option == "0":
            run = input(
                "\nEnter 'y' to go back to the main menu, or anything else to "
                "end the program. ")
        else:
            print("\nError in your selection input. Please try again. ")


def reset_list():
    """
reset_list() is how the program starts a new job. The program creates two new
files: jobData.txt and justData.txt which are accessed and edited in the other
options of the program.
We use the 'w' option for the open() command to overwrite existing files in
the project folder.
    """
    print(
        "Are you sure you want to start a new job list? \nThis will erase "
        "all current list data! ")
    warning = input(
        "\nEnter 'y' to confirm, or anything else to go back to the main "
        "menu. ")
    if warning == "y":
        print("\nAll previous data has been erased. Starting new job list. ")
        in_file = open("jobData.txt", 'w')
        in_file.close()
        in_file = open("justData.txt", 'w')
        in_file.close()
        job_collect()
    else:
        print("Returning to the main menu! ")


def job_collect():
    """
job_collect() adds jobs to the data text files. If needed, it will create new
files but if project files already exist, it will append new data inputs into
the project.
    """
    print("Now adding jobs to the list. ")
    add_data = "y"
    while add_data == "y":
        print("\nPlease enter job name, duration, and number of workers. ")
        try:
            job_name = input("What is the name of the job? ")
            job_duration = int(input(
                "How long will this job take to complete (in days)? "))
            job_workers = int(input(
                "What is the minimum number of workers this job requires to "
                "complete? "))

            #Below the function inputs data into two similar .txt files.
            #jobData.txt includes text for each job, while justData includes
            #integers only apart from the job names. This was intentionally
            #done to simplify my workflow for the purposes of the integration
            #project. In the real world, I would not duplicate project files.
            in_file = open("jobData.txt", 'a')
            in_file.write("Job name: " + job_name)
            in_file.write("\nDuration of job: " + str(job_duration))
            in_file.write("\nNumber of workers: " + str(job_workers))
            in_file.write("\n\n")
            in_file.close()

            in_file = open("justData.txt", 'a')
            in_file.write(job_name)
            in_file.write("\n" + str(job_duration))
            in_file.write("\n" + str(job_workers))
            in_file.write("\n\n")
            in_file.close()

            print("Job information has been collected. ")

            add_data = input(
                "\nEnter 'y' to input another job, or anything else to return "
                "to the main menu. ")
        except:
            print("Your input was not in the correct format. Please try "
                  "again. ")
    print("\nDone! All data was saved in the file 'jobData.txt'. Returning to "
          "the main menu! ")


def job_view_startup():
    """
job_view_startup() is the function that runs at the startup the option. It
displays an introduction message and then opens the job_view() function.
    """
    data_list = open('jobData.txt')
    num_jobs = int(len(data_list.readlines()) / 4)
    print(
        "There are " + str(num_jobs) + " jobs listed in the project, "
                                       "currently. ")
    job_view()


def job_view():
    """
job_view() allows the user to read the data currently inputted in the project
file.
    """
    view_another = "y"
    while view_another == "y":
        try:
            job_data_list = open('jobData.txt')
            read = job_data_list.readlines()
            job_selection = int(input("Enter job number you'd like to see: "))
            job_index = 4 * (job_selection - 1)
            data_list = open('jobData.txt')
            num_jobs = int(len(data_list.readlines()) / 4)
            if job_index <=-1 or job_selection > num_jobs:
                print("TEST There is not currently a job number " + str(
                    job_selection) + ". \n\nThere are " + str(
                    num_jobs) + " jobs listed in the project, currently. ")
            else:
                print(
                    str(job_selection) + ". " + str(read[job_index]) + "   " +
                    str(read[job_index + 1]) + "   " +
                    str(read[job_index + 2]))
                job_selection = 0
                view_another = input(
                    "Enter 'y' to view another job, or anything else to "
                    "return to the main menu. ")
        except:
            print("Error in your input, please try again. ")
    print("Returning to the main menu! ")


def optimize():
    """
optimize() allows the user to calculate optimal job durations based on whether
different tasks can be completed at the same time or not. This is the first
step towards a proper CPM network.
    """
    data_list = open('justData.txt')
    num_jobs = int(len(data_list.readlines()) / 4)
    print("\nThere are " + str(num_jobs) + " jobs listed in the project, "
                                           "currently. ")

    data_list = [x[:-1] for x in open('justData.txt').readlines()]

    counter = 0
    for x in data_list[0::4]:
        counter += 1
        print("Job " + str(counter) + ". " + str(x))

    day_values = data_list[1::4]
    worker_values = data_list[2::4]
    total_days = 0
    total_workers = 0
    for x in day_values:
        total_days += int(x)
    for x in worker_values:
        total_workers += int(x)
    print("\nYour project will require at least", str(total_days),
          "days and at least", str(total_workers),
          "workers in total to complete without any optimizations. ")

    check_another = "y"
    while check_another == "y":
        overlap = list(input(
            "\nEnter job numbers that can be completed at the same time, "
            "separated by commas: ").strip().split(','))

        overlap_day_values = []
        for x in overlap:
            overlap_day_values.append(data_list[1 + ((int(x) - 1) * 4)])

        nonoverlap_day_values = [x for x in day_values if
                                 x not in overlap_day_values]

        for i in range(0, len(nonoverlap_day_values)):
            nonoverlap_day_values[i] = int(nonoverlap_day_values[i])
        for i in range(0, len(overlap_day_values)):
            overlap_day_values[i] = int(overlap_day_values[i])

        max_total_overlap_day = int(max(overlap_day_values))

        new_total_days = max_total_overlap_day + sum(nonoverlap_day_values)

        print("\nYour project will now require at least", str(new_total_days),
              "days and at least", str(total_workers),
              "workers in total to complete. ")
        check_another = input(
            "\nEnter 'y' to check another configuration, or anything else to "
            "return to the main menu. ")
    print("Returning to the main menu! ")


def requirements():
    """
requirements() is a submenu that houses the remaining requirements not used in
 my program. It exists to suffice the integration project requirements.
    """
    run = "y"
    while run == "y":
        print(
            "\nThis submenu houses the remaining requirements that were not "
            "used in my program! ")
        print("Available options: \n1. Calculator. \n2. Miscellaneous. \n\n0."
              " Main Menu. ")
        select_option = input("\nWhich option would you like to utilize? ")
        if select_option == "1":
            calculator_startup()
        elif select_option == "2":
            misc_1()
        elif select_option == "0":
            run = "n"
            print("Returning to the main menu. ")
        else:
            print("\nError in your selection input. Please try again. ")


def calculator_startup():
    """
calculator_startup() only runs before calculator(), so the 'available math
operations' list doesn't display multiple times.
    """
    print(
        "The calculator is a set of functions that perform basic operations "
        "as well as check truth values of equality statements. ")
    print(
        "\nAvailable mathematical operations: \n (+) Addition \n (-) "
        "Subtraction \n (*) Multiplication \n (/) Division \n (%) Modulus "
        "\n(**) Exponentiation \n(//) Floor Division ")
    print(
        "\n (=) Equality \n(!=) Inequality \n (<) Less Than \n (>) Greater "
        "Than \n(<=) Less Than or Equal To \n(>=) Greater Than or Equal To ")
    calculator()


def calculator():
    """
calculator() is exactly what you would think it is: a set of functions that
perform basic operations and check truth values of equality statements.
    """
    check_another = "y"
    while check_another == "y":
        user_input = input(
            "\nEnter a mathematical expression in the form a \u2605 b, "
            "\nwhere a and b are numbers and \u2605 is a mathematical "
            "operator. ")
        user_input_list = list(user_input.strip().split())
        try:
            if '+' in user_input_list:
                a = float(user_input_list[0])
                b = float(user_input_list[2])
                print("Your chosen operation is addition. ")
                equals = a + b
                print(user_input, "=", equals)
            elif '-' in user_input_list:
                a = float(user_input_list[0])
                b = float(user_input_list[2])
                print("Your chosen operation is subtraction. ")
                equals = a - b
                print(user_input, "=", equals)
            elif '*' in user_input_list:
                a = float(user_input_list[0])
                b = float(user_input_list[2])
                print("Your chosen operation is multiplication. ")
                equals = a * b
                print(user_input, "=", equals)
            elif '/' in user_input_list:
                a = float(user_input_list[0])
                b = float(user_input_list[2])
                print("Your chosen operation is division. ")
                if b == 0:
                    print(
                        "Sorry, you cannot divide by zero. \nOperation "
                        "terminated. ")
                else:
                    equals = a / b
                    print(user_input, "=", equals)
            elif '**' in user_input_list:
                a = float(user_input_list[0])
                b = float(user_input_list[2])
                print("Your chosen operation is exponentiation. ")
                equals = a ** b
                print(user_input, "=", equals)
            elif '//' in user_input_list:
                a = float(user_input_list[0])
                b = float(user_input_list[2])
                print("Your chosen operation is floor division. ")
                equals = a // b
                print(user_input, "=", equals)
            elif '%' in user_input_list:
                a = float(user_input_list[0])
                b = float(user_input_list[2])
                print("Your chosen operation is modulus. ")
                equals = a % b
                print(user_input, "=", equals)
            elif '=' in user_input_list:
                a = float(user_input_list[0])
                b = float(user_input_list[2])
                print("You've chosen to check equality. ")
                if not a == b:
                    print(user_input, "is not a true expression. ")
                elif a == b:
                    print(user_input, "is a true expression. ")
            elif '!=' in user_input_list:
                a = float(user_input_list[0])
                b = float(user_input_list[2])
                print("You've chosen to check equality. ")
                if a != b:
                    print(user_input, "is a true expression. ")
                else:
                    print(user_input, "is not a true expression. ")
            elif '>' in user_input_list:
                a = float(user_input_list[0])
                b = float(user_input_list[2])
                print("You've chosen to check equality. ")
                if a > b:
                    print(user_input, "is a true expression. ")
                else:
                    print(user_input, "is not a true expression. ")
            elif '<' in user_input_list:
                a = float(user_input_list[0])
                b = float(user_input_list[2])
                print("You've chosen to check equality. ")
                if a < b:
                    print(user_input, "is a true expression. ")
                else:
                    print(user_input, "is not a true expression. ")
            elif '>=' in user_input_list:
                a = float(user_input_list[0])
                b = float(user_input_list[2])
                print("You've chosen to check equality. ")
                if a >= b:
                    print(user_input, "is a true expression. ")
                else:
                    print(user_input, "is not a true expression. ")
            elif '<=' in user_input_list:
                a = float(user_input_list[0])
                b = float(user_input_list[2])
                print("You've chosen to check equality. ")
                if a <= b:
                    print(user_input, "is a true expression. ")
                else:
                    print(user_input, "is not a true expression. ")
            else:
                print(
                    "Sorry, that does not fit this function's input "
                    "requirements. \nOperation terminated. ")
            check_another = input(
                "\nEnter 'y' to perform another operation, or anything else "
                "to return to the requirements menu. ")
        except:
            print("\nError in your selection input. Please try again. ")
    print("Returning to the requirements menu! ")


def misc_1():
    """
misc_n() are functions which allow me to satisfy project requirements.
    """
    print("Let's pass along some inputs as parameters to other functions! ")
    parameters = input("Type whatever you want and press enter! ")
    misc_2(parameters)
    print("\nThanks for playing! Returning to the requirements menu. ")


def misc_2(user_input):
    """
misc_n() are functions which allow me to satisfy project requirements.
    """
    if len(user_input) < 0 or len(user_input) == 0:  # or key term!
        print("Oops! You didn't enter anything! That won't work. ")
    elif user_input.isspace():
        print("Oops! You only entered spaces! That won't work. ")
    else:
        print("Your parameter was " + str(user_input) + "! ")
        user_input_list = list(user_input.strip().split())
        triple_it = input(
            "type 'three's company too' to triple every first phrase, bit, "
            "or chunk of your input! ")
        if triple_it == "three's company too":
            triple_input_list = []
            for x in range(0, len(user_input_list)):
                triple_input_list.append((" " + user_input_list[
                    x] + " ") * 3)  # string multiplication operator!
            print(triple_input_list)
        else:
            print("\nNo problem, three's a crowd anyways. ")
            parameters = user_input_list
            misc_3(parameters)


def misc_3(input_list):
    """
misc_n() are functions which allow me to satisfy project requirements.
    """
    if len(input_list) == 1:
        print("\nYou didn't include any spaces in your input! ")
    elif len(input_list) == 2:
        print("\nYou included 1 space in your input! ")
    elif 2 < len(input_list) <= 10:  # and key term!
        print("\nYou included " + str(
            len(input_list) - 1) + " spaces in your input! ")


main()
